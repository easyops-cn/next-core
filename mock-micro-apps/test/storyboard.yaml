app:
  name: Test
  id: test
  homepage: /
  noAuthGuard: true
meta:
  functions:
  - name: sayYes
    source: |
      function sayYes() {
        console.log("sayYes() is called");
        return "yes~";
      }
  - name: sayYesYes
    typescript: true
    source: |
      function sayYesYes(): string {
        console.log("sayYesYes() is called");
        return `${FN.sayYes()} and ${FN.sayYes()}`;
      }
  customTemplates:
  - name: tpl-inner
    state:
    - name: innerHello
      expose: true
    bricks:
    - brick: span
      properties:
        textContent: '<% "track state", `Inner says ${STATE.innerHello}` %>'
  - name: tpl-basic
    state:
    - name: lazyHello
      resolve:
        useProvider: demo-basic.have-more-fun
        args:
        - |
          <% `I'm lazy (${STATE.hello})` %>
        - 1000
        lazy: true
      track: true
      onChange:
        action: console.log
        args:
        - state onChange
        - lazyHello
        - '<% EVENT.detail %>'
        - '<% 0, STATE.lazyHello %>'
    - name: hello
      value: Hello World
      onChange:
        action: console.log
        args:
        - state onChange
        - hello
        - '<% EVENT.detail %>'
        - '<% 0, STATE.hello %>'
      expose: true
    - name: asyncHello
      # if: false
      resolve:
        useProvider: demo-basic.have-more-fun
        args:
        - I'm async
        - 500
        - '<% Math.random() %>'
    proxy:
      properties:
        thing:
          ref: thingSpan
          refProperty: textContent
        status:
          ref: statusSpan
          refProperty: textContent
      slots:
        "":
          ref: container
          refSlot: ""
      events:
        "yo":
          ref: thingSpan
          refEvent: click
    bricks:
    - brick: div
      ref: container
      slots:
        "":
          bricks:
          - brick: span
            ref: thingSpan
            events:
              click:
                targetRef: inner
                properties:
                  innerHello: 'I say thing clicked'
          - brick: span
            ref: statusSpan
            lifeCycle:
              onPageLoad:
                action: tpl.dispatchEvent
                args:
                - oops
                - detail: yaks
            events:
              click:
              - action: console.log
                args:
                - status click
                - '<% EVENT.detail %>'
              - action: tpl.dispatchEvent
                args:
                - oops
                - detail: yaks
              - targetRef: buttons
                properties:
                  datum: d
          - brick: demo-basic.button-group
            ref: buttons
            properties:
              datum: c
              useBrick:
                brick: tpl-inner
                ref: inner
                properties:
                  innerHello: '<% `"I say ${DATA} and ${STATE.asyncHello}"` %>'
          # - brick: span
          #   properties:
          #     textContent: "<% 'track state', STATE.asyncHello %>"
          #   lifeCycle:
          #     onPageLoad:
          #     - action: console.log
          #       args:
          #       - "STATE.asyncHello"
          #       - "<% STATE.asyncHello %>"
          #     - action: state.load
          #       args:
          #       - lazyHello
          #       callback:
          #         success:
          #           action: console.log
          #           args:
          #           - lazyHello
          #           - "<% 1, STATE.lazyHello %>"
  - name: tpl-isolated
    proxy:
      slots:
        "":
          ref: content
          refSlot: ""
    state:
    - name: input
      value: '<% "input",JSON.stringify(ITEM) %>'
    bricks:
    - brick: ":forEach"
      dataSource:
      - Good
      - Better
      slots:
        "":
          bricks:
          - brick: span
            properties:
              textContent: 'ITEM should show: '
          - brick: span
            properties:
              textContent: '<% JSON.stringify(ITEM) %>'
              style:
                color: green
    - brick: span
      properties:
        textContent: 'ITEM should NOT show: '
    - brick: span
      properties:
        textContent: '<% JSON.stringify(ITEM) %>'
        style:
          color: red
    - brick: span
      properties:
        textContent: 'ITEM should NOT show: '
    - brick: span
      properties:
        textContent: '<% STATE.input %>'
        style:
          color: red
    - brick: div
      ref: content
routes:
- path: ${APP.homepage}
  # if: '<% !QUERY.redirect %>'
  if: '${QUERY.redirect|not}'
  type: redirect
  redirect: '<% "/?redirect=1" %>'
- path: ${APP.homepage}
  if: '<% +QUERY.redirect === 1 %>'
  permissionsPreCheck:
  - abc
  - def
  context:
  - name: a
    value: 'a:b'
  - name: x
    resolve:
      useProvider: demo-basic.have-more-fun
      args:
      - '<% CTX.r %>'
      - 0
      transform:
        # value: '<% `{{${DATA}}}` %>'
        value: '{{{@{|add:"!"}}}}'
  - name: x
    if: '<% !CTX.r %>'
    resolve:
      useProvider: demo-basic.have-more-fun
      args:
      - '<% CTX.r %>'
      transform:
        value: '<% `{${DATA}}` %>'
  - name: y
    resolve:
      useProvider: demo-basic.have-more-fun
      args:
      - '<% CTX.r %>'
      - 0
      transform:
        value: '<% `「${DATA}」` %>'
    onChange:
      action: console.log
      args:
      - context changed
      - y
      - '<% EVENT.detail %>'
  - name: z
    value: '<% `z:${CTX.y}` %>'
    track: true
    onChange:
      action: console.log
      args:
      - context changed
      - z
      - '<% EVENT.detail %>'
  - name: r
    resolve:
      useProvider: demo-basic.have-fun
  - name: lazy
    resolve:
      useProvider: demo-basic.have-more-fun
      args:
      - '"lazy"'
      - 2000
      lazy: true
  bricks:
  - brick: basic.demo-button
    properties:
      label: "Hi:"
    slots:
      "":
        type: bricks
        bricks:
        - brick: span
          properties:
            textContent: OK
  - brick: demo-basic.y-button
    properties:
      label: "Hello:"
      textContent: world
    events:
      oops:
      # - action: context.replace
      #   args:
      #   - y
      #   - '<% `clicked:${CTX.y}` %>'
      - action: context.refresh
        args:
        - y
        callback:
          success:
            action: console.log
            args:
            - context replaced
            - '<% EVENT.detail %>'
            - '<% CTX.y %>'
            - '<% CTX.z %>'
      - action: console.log
        args:
        - '<% EVENT.detail %>'
        - '<% CTX.x %>'
        async: true
      - action: console.log
        args:
        - '<% EVENT.detail %>'
        - immediately
  # - brick: demo-basic.y-button
  #   properties:
  #     label: "你好:"
  #     textContent: 世界
  - brick: demo-basic.button-group
  - brick: div
    properties:
      title: '<% CTX.y %>'
    slots:
      "":
        type: bricks
        bricks:
        # - brick: demo-form.f-input
        #   properties:
        #     label: "Name:"
        # - brick: demo-form.f-select
        #   permissionsPreCheck:
        #   - xyz
        #   properties:
        #     label: |
        #       <% `!Gender (${PROCESSORS.demoBasic.sayHello()},${FN.sayYesYes()}) <${CTX.x}>` %>
        - brick: span
          properties:
            textContent: |
              <%
                "track context",
                (PERMISSIONS.check("opq") ? "Yes" : "No"),
                `y:${CTX.y},z:${CTX.z}`
              %>
          lifeCycle:
            onBeforePageLeave:
            - action: history.block
              # if: |
              #   <% !PROCESSORS.demoBasic.sayHello() %>
              if: false
              args:
              - Oops
            - action: console.log
              args:
              - 'onBeforePageLeave'
              # - '<% PROCESSORS.demoBasic.sayHello() %>'
              - '<% EVENT %>'
              - '<% CTX.y %>'
              - '<% CTX.z %>'
            onBeforePageLoad:
            - action: console.log
              args:
              - 'onBeforePageLoad'
              - '<% EVENT %>'
              - '<% CTX.y %>'
              - '<% CTX.z %>'
            - action: theme.setTheme
              args:
              - dark-v2
            onPageLoad:
              action: console.log
              args:
              - 'onPageLoad'
              - '<% EVENT %>'
              - '<% CTX.y %>'
              - '<% CTX.z %>'
            onAnchorLoad:
              action: console.log
              args:
              - 'onAnchorLoad'
              - '<% EVENT %>'
              - '<% CTX.y %>'
              - '<% CTX.z %>'
            onAnchorUnload:
              action: console.log
              args:
              - 'onAnchorUnload'
              - '<% EVENT %>'
              - '<% CTX.y %>'
              - '<% CTX.z %>'
            onPageLeave:
              action: console.log
              args:
              - 'onPageLeave'
              - '<% EVENT %>'
              - '<% CTX.y %>'
              - '<% CTX.z %>'
        - brick: a
          properties:
            textContent: Go outside
            href: '/oops'

  # - brick: demo-basic.have-fun
  # - brick: demo-basic.have-more-fun
  # - brick: demo-basic.have-no-fun
- path: ${APP.homepage}
  if: '<% +QUERY.redirect === 2 %>'
  context:
  - name: datum
    value: a
  bricks:
  - brick: demo-basic.x-button
    properties:
      label: X
    events:
      click:
        action: context.replace
        args:
        - datum
        - b
  - brick: demo-basic.button-group
    properties:
      datum: '<% "track context", CTX.datum %>'
      # useBrick:
      #   if: '<% DATA === "b" %>'
      #   brick: demo-basic.x-button
      #   properties:
      #     label: '<% `Label for "${DATA}"` %>'
      #     dataset:
      #       iid: 1
      #   slots:
      #     "":
      #       bricks:
      #       - brick: span
      #         properties:
      #           textContent: '<% `Content for "${DATA}"` %>'
      #           dataset:
      #             iid: 2
      useBrick:
        brick: tpl-basic
        # portal: true
        properties:
          thing: '<% `Thing for "${DATA}"` %>'
          status: '<% `Status for "${DATA}"` %>'
          hello: '<% `Hello for "${DATA}"` %>'
        events:
          yo:
            action: console.log
            args:
            - yo
            - '<% CTX.datum %>'
            - '<% DATA %>'
            - '<% EVENT %>'
        lifeCycle:
          onMount:
            action: console.log
            args:
            - onMount outer tpl-basic
            - '<% EVENT %>'
            - '<% DATA %>'
          onUnmount:
            action: console.log
            args:
            - onUnmount outer tpl-basic
            - '<% EVENT %>'
            - '<% DATA %>'
          onMediaChange:
            action: console.log
            args:
            - onMediaChange
            - '<% EVENT.detail.breakpoint %>'
            - '<% DATA %>'
          onScrollIntoView:
            handlers:
            - action: console.log
              args:
              - onScrollIntoView
              - '<% EVENT %>'
              - '<% DATA %>'
  - brick: tpl-basic
    if: false
    properties:
      thing: Template
      status: Works!
      hello: 你好
    slots:
      "":
        type: bricks
        bricks:
        - brick: span
          properties:
            textContent: "~~"
            # textContent: "<% 0, STATE.hello %>"
    #       lifeCycle:
    #         onPageLoad:
    #           action: console.log
    #           args:
    #           - "1. STATE.hello"
    #           - "<% 1, STATE.hello %>"
    # lifeCycle:
    #   onPageLoad:
    #     action: console.log
    #     args:
    #     - "2. STATE.hello"
    #     - "<% 2, STATE.hello %>"
    events:
      yo:
        action: console.log
      oops:
        action: console.log

- path: ${APP.homepage}
  if: '<% +QUERY.redirect === 3 %>'
  bricks:
  - brick: demo-basic.button-with-icon
  - brick: icons.easyops-icon
    properties:
      # icon: account
      category: default
      icon: account
      style:
        color: red
        fontSize: 2em
  - brick: icons.fa-icon
    properties:
      iconPrefix: regular
      icon: smile
      spin: true
      style:
        color: green
  - brick: icons.antd-icon
    properties:
      theme: outlined
      icon: aim
      style:
        color: blue
  - brick: icons.general-icon
    properties:
      lib: antd
      icon: branches
    events:
      click:
        action: console.log
  # - brick: basic.fa-icon
  #   properties:
  #     prefix: solid
  #     icon: user
  # - brick: span
  #   properties:
  #     class: "fa-solid fa-user"

- path: ${APP.homepage}
  if: '<% +QUERY.redirect === 4 %>'
  bricks:
  - brick: demo-widgets.tpl-first-template
  - brick: demo-widgets.tpl-second-template

- path: ${APP.homepage}
  if: '<% +QUERY.redirect === 5 %>'

  bricks:
  # 控制节点一：循环遍历
  - brick: ":forEach"
    if: false
    dataSource:
    - title: A
      content: Hello
      list:
      - u
      - v
    - title: B
      content: World
      list:
      - x
      - y
    slots:
      # 保留插槽结构，以便兼容现有 Visual Builder 构件树的展示风格。
      # 同时以支持 if/else 和 switch 以及未来可能的其他控制节点的扩展。
      "":
        bricks:
        - brick: div
          properties:
            # 表达式提供一个 `ITEM` 的变量
            textContent: "<% ITEM.title %>"
        - brick: :forEach
          dataSource: "<% ITEM.list %>"
          slots:
            "":
              bricks:
              - brick: span
                properties:
                  textContent: "<% ITEM %>"
              - brick: tpl-isolated
        - brick: div
          properties:
            textContent: "<% ITEM.content %>"
        - brick: tpl-isolated
          slots:
            "":
              bricks:
              - brick: span
                properties:
                  textContent: 'ITEM should show <external of tpl>: '
              - brick: span
                iid: 'iid'
                properties:
                  textContent: '<% `Got: ${JSON.stringify(ITEM)}` %>'
                  style:
                    color: green

  # 控制节点二：条件判断
  - brick: ":if"
    if: false
    dataSource: "<% false %>"
    slots:
      "":
        bricks:
        - brick: input
        - brick: textarea
      "else":
        bricks:
        - brick: button
        - brick: hr

  # # 控制节点三：条件选择
  - brick: ":switch"
    dataSource: |
      <%
        "b"
      %>
    slots:
      "a":
        bricks:
        - brick: input
        - brick: textarea
      "b":
        bricks:
        - brick: button
        - brick: hr
