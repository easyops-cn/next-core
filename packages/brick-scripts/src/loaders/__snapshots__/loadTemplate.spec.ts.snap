// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loadTemplate should create a new brick 1`] = `
Array [
  Array [
    "dist/ForBetter.spec.tsx",
    "import React from \\"react\\";
import { fireEvent, render, screen } from \\"@testing-library/react\\";
import \\"@testing-library/jest-dom\\";
import { ForBetter } from \\"./ForBetter\\";

describe(\\"ForBetter\\", () => {
  it(\\"should work\\", () => {
    render(<ForBetter />);
    fireEvent.click(screen.getByTestId(\\"my-brick\\"));
    expect(screen.getByTestId(\\"my-brick\\")).toHaveTextContent(
      \\"FOR_GOOD works!\\"
    );
  });
});
",
  ],
  Array [
    "dist/ForBetter.tsx",
    "import React from \\"react\\";
import { useTranslation } from \\"react-i18next\\";
import { NS_FOR_GOOD, K } from \\"../i18n/constants\\";

export function ForBetter(): React.ReactElement {
  const { t } = useTranslation(NS_FOR_GOOD);

  return (
    <div data-testid=\\"my-brick\\">{t(K.FOR_GOOD)} works!</div>
  );
}
",
  ],
  Array [
    "dist/index.spec.ts",
    "import ReactDOM from \\"react-dom\\";
import \\"./\\";

const spyOnRender = jest
  .spyOn(ReactDOM, \\"render\\")
  .mockImplementation(() => null);
const unmountComponentAtNode = jest
  .spyOn(ReactDOM, \\"unmountComponentAtNode\\")
  .mockImplementation(() => null);

describe(\\"for-good.for-better\\", () => {
  it(\\"should create a custom element\\", () => {
    const element = document.createElement(\\"for-good.for-better\\");
    expect(spyOnRender).not.toBeCalled();
    document.body.appendChild(element);
    expect(spyOnRender).toBeCalled();
    document.body.removeChild(element);
    expect(unmountComponentAtNode).toBeCalled();
  });
});
",
  ],
  Array [
    "dist/index.tsx",
    "import React from \\"react\\";
import ReactDOM from \\"react-dom\\";
import { BrickWrapper, UpdatingElement } from \\"@next-core/brick-kit\\";
import { ForBetter } from \\"./ForBetter\\";

/**
 * @id for-good.for-better
 * @author bot
 * @history
 * 1.x.0: 新增构件 \`for-good.for-better\`
 * @docKind brick
 * @noInheritDoc
 */
export class ForBetterElement extends UpdatingElement {
  connectedCallback(): void {
    // Don't override user's style settings.
    // istanbul ignore else
    if (!this.style.display) {
      this.style.display = \\"block\\";
    }
    this._render();
  }

  disconnectedCallback(): void {
    ReactDOM.unmountComponentAtNode(this);
  }

  protected _render(): void {
    // istanbul ignore else
    if (this.isConnected) {
      ReactDOM.render(
        <BrickWrapper>
          <ForBetter />
        </BrickWrapper>,
        this
      );
    }
  }
}

customElements.define(\\"for-good.for-better\\", ForBetterElement);
",
  ],
]
`;

exports[`loadTemplate should create a new custom processor 1`] = `
Array [
  Array [
    "dist/doGood.spec.ts",
    "import { doGood } from \\"./doGood\\";

jest.mock(\\"@next-core/brick-kit\\", () => ({
  getRuntime: () => ({
    registerCustomProcessor: jest.fn(),
  }),
}));

describe(\\"doGood\\", () => {
  it(\\"should work\\", () => {
    expect(doGood()).toEqual(undefined);
  });
});
",
  ],
  Array [
    "dist/doGood.ts",
    "import { getRuntime } from \\"@next-core/brick-kit\\";

export function doGood(): any {
  // ...
}

getRuntime().registerCustomProcessor(
  \\"forGood.doGood\\",
  doGood
);
",
  ],
]
`;

exports[`loadTemplate should create a new custom provider 1`] = `
Array [
  Array [
    "dist/GetData.spec.ts",
    "import {
  GetData,
  GetDataParams,
} from \\"./GetData\\";

describe(\\"GetData\\", () => {
  it.each<[GetDataParams, any]>([[{}, null]])(
    \\"GetData(%j) should work\\",
    async (params, result) => {
      expect(await GetData(params)).toEqual(result);
    }
  );
});
",
  ],
  Array [
    "dist/GetData.ts",
    "import { createProviderClass } from \\"@next-core/brick-utils\\";

export interface GetDataParams {}

export function GetData(
  params: GetDataParams
): Promise<unknown> {
  return null;
}

customElements.define(
  \\"for-good.provider-get-data\\",
  createProviderClass(GetData)
);
",
  ],
]
`;

exports[`loadTemplate should create a new custom template 1`] = `
Array [
  Array [
    "dist/for-better.ts",
    "import { getRuntime } from \\"@next-core/brick-kit\\";

getRuntime().registerCustomTemplate(\\"for-good.for-better\\", {
  proxy: {},
  bricks: [],
});
",
  ],
]
`;

exports[`loadTemplate should create a new package of bricks 1`] = `
Array [
  Array [
    "dist/jest.config.js",
    "const { jestConfigFactory } = require(\\"@next-core/jest-config-factory\\");

module.exports = jestConfigFactory({
  standalone: true,
  cwd: __dirname,
});
",
  ],
  Array [
    "dist/rollup.snippets.js",
    "import { rollupFactoryForSnippets } from \\"@next-core/rollup-config-factory\\";

export default rollupFactoryForSnippets();
",
  ],
  Array [
    "dist/scripts/generate-version-file.js",
    "const { createVersionFile } = require(\\"@next-core/build-config-factory\\");

createVersionFile();
",
  ],
  Array [
    "dist/scripts/post-build.js",
    "const { postBuild } = require(\\"@next-core/build-config-factory\\");

postBuild(\\"bricks\\");
",
  ],
  Array [
    "dist/scripts/pre-build.js",
    "const { preBuild } = require(\\"@next-core/build-config-factory\\");

preBuild(\\"bricks\\");
",
  ],
  Array [
    "dist/scripts/rename-tar-package.js",
    "const { renameTarPackage } = require(\\"@next-core/build-config-factory\\");

renameTarPackage();
",
  ],
  Array [
    "dist/src/i18n/constants.ts",
    "export const NS_FOR_GOOD = \\"for-good\\";

export enum K {
  FOR_GOOD = \\"FOR_GOOD\\"
}

export type Locale = { [key in K]: string };
",
  ],
  Array [
    "dist/src/i18n/index.ts",
    "import i18next from \\"i18next\\";
import { NS_FOR_GOOD } from \\"./constants\\";
import en from \\"./locales/en\\";
import zh from \\"./locales/zh\\";

i18next.addResourceBundle(\\"en\\", NS_FOR_GOOD, en);
i18next.addResourceBundle(\\"zh\\", NS_FOR_GOOD, zh);
",
  ],
  Array [
    "dist/src/i18n/locales/en.ts",
    "import { Locale, K } from \\"../constants\\";

const locale: Locale = {
  [K.FOR_GOOD]: \\"For Good\\"
};

export default locale;
",
  ],
  Array [
    "dist/src/i18n/locales/zh.ts",
    "import { Locale, K } from \\"../constants\\";

const locale: Locale = {
  [K.FOR_GOOD]: \\"For Good\\"
};

export default locale;
",
  ],
  Array [
    "dist/src/index.spec.ts",
    "import i18next from \\"i18next\\";
import * as kit from \\"@next-core/brick-kit\\";

const spyOnAddResourceBundle = (i18next.addResourceBundle = jest.fn());

jest.spyOn(window.customElements, \\"define\\");

jest.spyOn(kit, \\"getRuntime\\").mockReturnValue({
  registerCustomTemplate: jest.fn(),
  registerCustomProcessor: jest.fn(),
} as any);

jest.mock(\\"./lazy-bricks\\", () => void 0);

// Use \`require\` instead of \`import\` to avoid hoisting.
require(\\"./index\\");

describe(\\"index\\", () => {
  it(\\"should add i18n resource bundle\\", () => {
    expect(spyOnAddResourceBundle).toBeCalled();
  });
});
",
  ],
  Array [
    "dist/src/index.ts",
    "import \\"./i18n\\";
",
  ],
  Array [
    "dist/tsconfig.json",
    "{
  \\"extends\\": \\"../../tsconfig.json\\",
  \\"include\\": [
    \\"./src\\",
    \\"../../declarations\\"
  ]
}
",
  ],
  Array [
    "dist/webpack.config.js",
    "const { bricks, merge } = require(\\"@next-core/webpack-config-factory\\");

const { webpackCommonFactory, webpackDevFactory, webpackProdFactory } = bricks;

module.exports = merge(
  webpackCommonFactory(),
  process.env.NODE_ENV === \\"development\\"
    ? webpackDevFactory()
    : webpackProdFactory()
);
",
  ],
  Array [
    "dist/src/for-better/ForBetter.spec.tsx",
    "import React from \\"react\\";
import { fireEvent, render, screen } from \\"@testing-library/react\\";
import \\"@testing-library/jest-dom\\";
import { ForBetter } from \\"./ForBetter\\";

describe(\\"ForBetter\\", () => {
  it(\\"should work\\", () => {
    render(<ForBetter />);
    fireEvent.click(screen.getByTestId(\\"my-brick\\"));
    expect(screen.getByTestId(\\"my-brick\\")).toHaveTextContent(
      \\"FOR_GOOD works!\\"
    );
  });
});
",
  ],
  Array [
    "dist/src/for-better/ForBetter.tsx",
    "import React from \\"react\\";
import { useTranslation } from \\"react-i18next\\";
import { NS_FOR_GOOD, K } from \\"../i18n/constants\\";

export function ForBetter(): React.ReactElement {
  const { t } = useTranslation(NS_FOR_GOOD);

  return (
    <div data-testid=\\"my-brick\\">{t(K.FOR_GOOD)} works!</div>
  );
}
",
  ],
  Array [
    "dist/src/for-better/index.spec.ts",
    "import ReactDOM from \\"react-dom\\";
import \\"./\\";

const spyOnRender = jest
  .spyOn(ReactDOM, \\"render\\")
  .mockImplementation(() => null);
const unmountComponentAtNode = jest
  .spyOn(ReactDOM, \\"unmountComponentAtNode\\")
  .mockImplementation(() => null);

describe(\\"for-good.for-better\\", () => {
  it(\\"should create a custom element\\", () => {
    const element = document.createElement(\\"for-good.for-better\\");
    expect(spyOnRender).not.toBeCalled();
    document.body.appendChild(element);
    expect(spyOnRender).toBeCalled();
    document.body.removeChild(element);
    expect(unmountComponentAtNode).toBeCalled();
  });
});
",
  ],
  Array [
    "dist/src/for-better/index.tsx",
    "import React from \\"react\\";
import ReactDOM from \\"react-dom\\";
import { BrickWrapper, UpdatingElement } from \\"@next-core/brick-kit\\";
import { ForBetter } from \\"./ForBetter\\";

/**
 * @id for-good.for-better
 * @author bot
 * @history
 * 1.x.0: 新增构件 \`for-good.for-better\`
 * @docKind brick
 * @noInheritDoc
 */
export class ForBetterElement extends UpdatingElement {
  connectedCallback(): void {
    // Don't override user's style settings.
    // istanbul ignore else
    if (!this.style.display) {
      this.style.display = \\"block\\";
    }
    this._render();
  }

  disconnectedCallback(): void {
    ReactDOM.unmountComponentAtNode(this);
  }

  protected _render(): void {
    // istanbul ignore else
    if (this.isConnected) {
      ReactDOM.render(
        <BrickWrapper>
          <ForBetter />
        </BrickWrapper>,
        this
      );
    }
  }
}

customElements.define(\\"for-good.for-better\\", ForBetterElement);
",
  ],
]
`;

exports[`loadTemplate should create a new package of bricks without any bricks 1`] = `
Array [
  Array [
    "dist/jest.config.js",
    "const { jestConfigFactory } = require(\\"@next-core/jest-config-factory\\");

module.exports = jestConfigFactory({
  standalone: true,
  cwd: __dirname,
});
",
  ],
  Array [
    "dist/rollup.snippets.js",
    "import { rollupFactoryForSnippets } from \\"@next-core/rollup-config-factory\\";

export default rollupFactoryForSnippets();
",
  ],
  Array [
    "dist/scripts/generate-version-file.js",
    "const { createVersionFile } = require(\\"@next-core/build-config-factory\\");

createVersionFile();
",
  ],
  Array [
    "dist/scripts/post-build.js",
    "const { postBuild } = require(\\"@next-core/build-config-factory\\");

postBuild(\\"bricks\\");
",
  ],
  Array [
    "dist/scripts/pre-build.js",
    "const { preBuild } = require(\\"@next-core/build-config-factory\\");

preBuild(\\"bricks\\");
",
  ],
  Array [
    "dist/scripts/rename-tar-package.js",
    "const { renameTarPackage } = require(\\"@next-core/build-config-factory\\");

renameTarPackage();
",
  ],
  Array [
    "dist/src/i18n/constants.ts",
    "export const NS_FOR_GOOD = \\"for-good\\";

export enum K {
  FOR_GOOD = \\"FOR_GOOD\\"
}

export type Locale = { [key in K]: string };
",
  ],
  Array [
    "dist/src/i18n/index.ts",
    "import i18next from \\"i18next\\";
import { NS_FOR_GOOD } from \\"./constants\\";
import en from \\"./locales/en\\";
import zh from \\"./locales/zh\\";

i18next.addResourceBundle(\\"en\\", NS_FOR_GOOD, en);
i18next.addResourceBundle(\\"zh\\", NS_FOR_GOOD, zh);
",
  ],
  Array [
    "dist/src/i18n/locales/en.ts",
    "import { Locale, K } from \\"../constants\\";

const locale: Locale = {
  [K.FOR_GOOD]: \\"For Good\\"
};

export default locale;
",
  ],
  Array [
    "dist/src/i18n/locales/zh.ts",
    "import { Locale, K } from \\"../constants\\";

const locale: Locale = {
  [K.FOR_GOOD]: \\"For Good\\"
};

export default locale;
",
  ],
  Array [
    "dist/src/index.spec.ts",
    "import i18next from \\"i18next\\";
import * as kit from \\"@next-core/brick-kit\\";

const spyOnAddResourceBundle = (i18next.addResourceBundle = jest.fn());

jest.spyOn(window.customElements, \\"define\\");

jest.spyOn(kit, \\"getRuntime\\").mockReturnValue({
  registerCustomTemplate: jest.fn(),
  registerCustomProcessor: jest.fn(),
} as any);

jest.mock(\\"./lazy-bricks\\", () => void 0);

// Use \`require\` instead of \`import\` to avoid hoisting.
require(\\"./index\\");

describe(\\"index\\", () => {
  it(\\"should add i18n resource bundle\\", () => {
    expect(spyOnAddResourceBundle).toBeCalled();
  });
});
",
  ],
  Array [
    "dist/src/index.ts",
    "import \\"./i18n\\";
",
  ],
  Array [
    "dist/tsconfig.json",
    "{
  \\"extends\\": \\"../../tsconfig.json\\",
  \\"include\\": [
    \\"./src\\",
    \\"../../declarations\\"
  ]
}
",
  ],
  Array [
    "dist/webpack.config.js",
    "const { bricks, merge } = require(\\"@next-core/webpack-config-factory\\");

const { webpackCommonFactory, webpackDevFactory, webpackProdFactory } = bricks;

module.exports = merge(
  webpackCommonFactory(),
  process.env.NODE_ENV === \\"development\\"
    ? webpackDevFactory()
    : webpackProdFactory()
);
",
  ],
]
`;

exports[`loadTemplate should create a new package of dll 1`] = `
Array [
  Array [
    "dist/webpack.dll.js",
    "const { dll } = require(\\"@next-core/webpack-config-factory\\");

module.exports = dll.webpackDllFactory();
",
  ],
]
`;

exports[`loadTemplate should create a new package of libs 1`] = `
Array [
  Array [
    "dist/jest.config.js",
    "const { jestConfigFactory } = require(\\"@next-core/jest-config-factory\\");

module.exports = jestConfigFactory({
  standalone: true,
  cwd: __dirname,
});
",
  ],
  Array [
    "dist/scripts/post-build.js",
    "const { postBuild } = require(\\"@next-core/build-config-factory\\");

postBuild(\\"libs\\");
",
  ],
  Array [
    "dist/src/index.ts",
    "",
  ],
  Array [
    "dist/tsconfig.json",
    "{
  \\"extends\\": \\"../../tsconfig.json\\",
  \\"include\\": [
    \\"./src\\",
    \\"../../declarations\\"
  ]
}
",
  ],
]
`;

exports[`loadTemplate should create a new package of providers 1`] = `
Array [
  Array [
    "dist/jest.config.js",
    "const { jestConfigFactory } = require(\\"@next-core/jest-config-factory\\");

module.exports = jestConfigFactory({
  standalone: true,
  cwd: __dirname,
});
",
  ],
  Array [
    "dist/rollup.snippets.js",
    "import { rollupFactoryForSnippets } from \\"@next-core/rollup-config-factory\\";

export default rollupFactoryForSnippets();
",
  ],
  Array [
    "dist/scripts/generate-version-file.js",
    "const { createVersionFile } = require(\\"@next-core/build-config-factory\\");

createVersionFile();
",
  ],
  Array [
    "dist/scripts/post-build.js",
    "const { postBuild } = require(\\"@next-core/build-config-factory\\");

postBuild(\\"bricks\\");
",
  ],
  Array [
    "dist/scripts/pre-build.js",
    "const { preBuild } = require(\\"@next-core/build-config-factory\\");

preBuild(\\"providers\\");
",
  ],
  Array [
    "dist/scripts/rename-tar-package.js",
    "const { renameTarPackage } = require(\\"@next-core/build-config-factory\\");

renameTarPackage();
",
  ],
  Array [
    "dist/tsconfig.json",
    "{
  \\"extends\\": \\"../../tsconfig.json\\",
  \\"include\\": [
    \\"./src\\",
    \\"../../declarations\\"
  ]
}
",
  ],
  Array [
    "dist/webpack.config.js",
    "const { bricks, merge } = require(\\"@next-core/webpack-config-factory\\");

const { webpackCommonFactory, webpackDevFactory, webpackProdFactory } = bricks;

module.exports = merge(
  webpackCommonFactory(),
  process.env.NODE_ENV === \\"development\\"
    ? webpackDevFactory()
    : webpackProdFactory()
);
",
  ],
  Array [
    "dist/.gitignore",
    "/src/
",
  ],
]
`;
